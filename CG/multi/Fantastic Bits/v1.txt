import sys
import math
from time import time
from operator import itemgetter
# Grab Snaffles and try to throw them through the opponent's goal!
# Move towards a Snaffle and use your team id to determine where you need to throw it.

def scalar(vector1, vector2):
    return (vector1[0]*vector2[1] - vector1[1]*vector2[0])
    
def norm(vector):
    return (vector[0]**2 + vector[1]**2)**0.5

class Entity():
    # entity_id: entity identifier
    # entity_type: "WIZARD", "OPPONENT_WIZARD" or "SNAFFLE" (or "BLUDGER" after first league)
    # x: position
    # y: position
    # vx: velocity
    # vy: velocity
    # state: 1 if the wizard is holding a Snaffle, 0 otherwise
    def __init__(self, input_txt):
        self.entityId = int(input_txt[0])
        self.entityType = input_txt[1]
        self.x = int(input_txt[2])
        self.y = int(input_txt[3])
        self.vx = int(input_txt[4])
        self.vy = int(input_txt[5])
        self.state = int(input_txt[6])
        self.distance = {}
        self.target = None
        self.thrust = 100
        Entity_list.append(self)
        if self.entityType == "WIZARD":
            my_wizard.append(self)
        if self.entityType == "SNAFFLE":
            snaffle_list.append(self)
            
    def distance_to(self, snaffle):
        d = ((self.x - snaffle.x)**2 + (self.y - snaffle.y)**2)**0.5
        self.distance[snaffle] = d
        
    def get_target(self, already_used):
        min_dist = 50000
        for elem in self.distance:
            if self.distance[elem] < min_dist and elem.state == 0 and (elem != already_used or len(snaffle_list) == 1):
                self.target = elem
                min_dist = self.distance[elem]
        return self.target
    
    def set_thrust(self):
        if self.target is None:
            self.thrust = 100
        else:
            v1 = (self.vx, self.vy)
            v2 = (-self.x+self.target.x, -self.y+self.target.y)
            if norm(v1) == 0 or norm(v2) == 0:
                self.thrust = 100
            else:
                theta = math.degrees(math.acos(scalar(v1, v2)/(norm(v1)*norm(v2))))
                print(self.entityId, self.target.entityId, "theta", theta, file=sys.stderr)
                if theta > 155 or theta < 25:
                    self.thrust = 50
                else:
                    if self.distance[self.target] > 1500:
                        self.thrust = 150
                    else:
                        self.thrust = 100
    
    def throw(self):
        print("THROW", goal_pos[0], goal_pos[1], "500")
    
    def go_to_target(self):
        self.set_thrust()
        print("MOVE", self.target.x, self.target.y, self.thrust)
        

my_team_id = int(input())  # if 0 you need to score on the right of the map, if 1 you need to score on the left
if my_team_id == 1:
    goal_pos = [0, 3750]
else:
    goal_pos = [16000, 3750]

while True:
    start_time = time()
    
    Entity_list = []
    my_wizard = []
    snaffle_list = []
    target = None

    entities = int(input())  # number of entities still in game
    for i in range(entities):
        Entity(input().split())
            
    for each_wizard in my_wizard:
        for each_snaffle in snaffle_list:
            each_wizard.distance_to(each_snaffle)
    
    for each_wizard in my_wizard:
        if each_wizard.state == 0: # and not each_wizard.target is None:
            target = each_wizard.get_target(target)
            each_wizard.go_to_target()
        else:
            each_wizard.throw()
        # Write an action using print
        # To debug: print("Debug messages...", file=sys.stderr)


        # Edit this line to indicate the action for each wizard (0 = thrust = 150, 0 = power = 500)
        # i.e.: "MOVE x y thrust" or "THROW x y power"
    
    print(time()-start_time, file=sys.stderr)
